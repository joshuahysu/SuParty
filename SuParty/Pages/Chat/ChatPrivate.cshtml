@page
@using Microsoft.Extensions.Localization
@model SuParty.Pages.ChatPrivateModel

@inject IStringLocalizer<SuParty.Pages.ChatPrivateModel> Localizer
<style>
    #messagesList {
        list-style: none;
        padding: 0;
    }

    .message {
        max-width: 60%;
        margin: 10px;
        padding: 10px;
        border-radius: 10px;
        clear: both;
        position: relative;
    }

    .message.left {
        background-color: #f1f1f1;
        text-align: left;
        float: left;
    }

    .message.right {
        background-color: #cce5ff;
        text-align: right;
        float: right;
    }

    .timestamp {
        font-size: 0.8em;
        color: #888;
    }

    .content {
        display: inline-block;
        margin-left: 5px;
    }
</style>

@{
    ViewData["Title"] = "即時留言板";
    Layout = "_Layout";
}

<div class="container">
    <!-- Razor 頁面內的 Vue App -->


 @*    <div id="app">
        <chat-room></chat-room>
    </div> 

    <script type="module" src="/src/components/ChatRoom.js"></script> <!-- 引入你的 app.js 文件 -->
    *@
    <div class="row">
        <!-- 左邊聊天室列表 -->
        <div class="col-md-3">
            <h3>聊天室列表</h3>
            <ul id="chatroomList">
                <!-- 假設有一些聊天室名稱 -->
                <li><a href="?chatroomId=1">1</a></li>
                <li><a href="?chatroomId=2">2</a></li>
                <!-- 動態生成聊天室 -->
                @foreach (var chatroom in Model.Chatrooms)
                {
                    <li><a href="?chatroomId=@chatroom">@chatroom</a></li>
                }
            </ul>
        </div>

        <div class="col-md-9 d-flex flex-column chat-container">
            <h1>聊天室</h1>

            <!-- 訊息區塊 -->
            <div id="messagesWrapper" class="flex-grow-1 overflow-auto mb-2">
                <ul id="messagesList" class="list-unstyled">
                    @foreach (var message in Model.Messages)
                    {
                        var isCurrentUser = message.UserId == Model.UserId;
                        var messageClass = isCurrentUser ? "message right" : "message left";
                        <li class="@messageClass mb-2">
                            <strong>@message.Name</strong>
                            <span class="timestamp">(@message.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss"))</span>:
                            <span class="content">@message.Content</span>
                        </li>
                    }
                </ul>
            </div>

            <!-- 輸入表單固定底部 -->
            <form id="messageForm" class="input-group">
                <!-- 擴大高度：rows=3 + 自訂 style -->
                <textarea id="Content"
                          class="form-control"
                          rows="3"
                          style="min-height: 3.5rem; resize: none;"
                          required
                          placeholder="輸入訊息… (Enter 送出，Shift+Enter 換行)">
                </textarea>
                <button id="sendBtn" class="btn btn-primary" type="submit">送出</button>
            </form>

            <button id="messageFormDelete" class="btn btn-outline-danger mt-2">刪除全部</button>
        </div>

    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.15/signalr.min.js"></script>
<script>
    const currentUserId = "@Model.UserId";
    // 從 URL 查詢參數中提取 chatroomId
    const urlParams = new URLSearchParams(window.location.search);
    const chatroomId = urlParams.get('chatroomId'); // 讀取 'chatroomId' 的值
    const connection = new signalR.HubConnectionBuilder()
        .withUrl(`/messageHub?chatroomId=${chatroomId}`)
        .build();

    // 處理連線重新連接的事件
    connection.onclose(async () => {
        console.log("Connection lost, attempting to reconnect...");
        await connection.start().catch(err => console.error("Reconnection failed", err));
    });

    // 設定接收訊息的處理ReceiveMessage
     connection.on("RM", (name, content, userId, timestamp) => {
        const isCurrentUser = userId === currentUserId; // 你需要在前端定義 currentUserId
        const side = isCurrentUser ? "right" : "left";
        const li = document.createElement("li");
        li.className = `message ${side}`;

        li.innerHTML = `
            <strong>${name}</strong>
            <span class="timestamp">(${timestamp})</span>:
            <span class="content">${content}</span>
        `;
        document.getElementById("messagesList").appendChild(li);
    });


    // 啟動連線
    connection.start().catch(err => console.error("Connection failed: ", err));

     const textarea = document.getElementById("Content");
    const form = document.getElementById("messageForm");

    // 按 Enter（不含 Shift）就送出表單
    textarea.addEventListener("keydown", function (e) {
        if (e.key === "Enter" && !e.shiftKey) {
            e.preventDefault(); // 防止換行
            form.requestSubmit(); // 觸發表單送出
        }
    });

    // 原本的提交事件
    form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const content = textarea.value.trim();
        if (content === "") return;

        const message = {
            content: content,
            createdAt: new Date().toISOString(),
            chatroomId: chatroomId // 假設你有 chatroomId 全域變數
        };

        try {
            await connection.invoke("S", message);
        } catch (err) {
            console.error("SendMessage failed: ", err);
        }

        textarea.value = "";
        textarea.focus(); // 重新聚焦
    });
    //刪除
    document.getElementById('messageFormDelete').addEventListener('click', function () {
        const button = this;
        // 發送請求並處理結果
        sendRequest(_baseUrlAddAction('DeleteChatRoom'), { chatroomId:chatroomId })
            .then(data => {
                if (data.success) {
                    window.location.href = "../";
                } else {
            
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    });
</script>