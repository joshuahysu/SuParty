@page
@using Microsoft.Extensions.Localization
@model SuParty.Pages.ChatPrivateModel

@inject IStringLocalizer<SuParty.Pages.ChatPrivateModel> Localizer
<style>
    #messagesList {
        list-style: none;
        padding: 0;
    }

    .message {
        max-width: 60%;
        margin: 10px;
        padding: 10px;
        border-radius: 10px;
        clear: both;
        position: relative;
    }

        .message.left {
            background-color: #f1f1f1;
            text-align: left;
            float: left;
        }

        .message.right {
            background-color: #cce5ff;
            text-align: right;
            float: right;
        }

    .timestamp {
        font-size: 0.8em;
        color: #888;
    }

    .content {
        display: inline-block;
        margin-left: 5px;
    }
</style>

@{
    ViewData["Title"] = "即時留言板";
    Layout = "_Layout";
}

<div class="container">
    <!-- Razor 頁面內的 Vue App -->


 @*    <div id="app">
        <chat-room></chat-room>
    </div> 

    <script type="module" src="/src/components/ChatRoom.js"></script> <!-- 引入你的 app.js 文件 -->
    *@
    <div class="row">
        <!-- 左邊聊天室列表 -->
        <div class="col-md-3">
            <h3>聊天室列表</h3>
            <ul id="chatroomList">
                <!-- 假設有一些聊天室名稱 -->
                <li><a href="?chatroomId=1">1</a></li>
                <li><a href="?chatroomId=2">2</a></li>
                <!-- 動態生成聊天室 -->
                @foreach (var chatroom in Model.Chatrooms)
                {
                    <li><a href="?chatroomId=@chatroom">@chatroom</a></li>
                }
            </ul>
        </div>

        <!-- 右邊即時留言板 -->
        <div class="col-md-9">
            <h1>聊天室</h1>

            <!-- 留言表單 -->
            <form id="messageForm">
                 <div> 
                     <label for="Content">內容：</label> 
                     <textarea id="Content" required></textarea> 
                 </div> 
                <button type="submit">送出</button> 
             </form> 

            <h2>訊息</h2>
            @* <ul id="messagesList"> *@
            @*     @foreach (var message in Model.Messages) *@
            @*     { *@
            @*         <li><strong>@message.Name</strong> (@message.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")): @message.Content</li> *@
            @*     } *@
            @* </ul> *@
            <ul id="messagesList">
                @foreach (var message in Model.Messages)
                {
                    var isCurrentUser = message.UserId == Model.UserId;
                    var messageClass = isCurrentUser ? "message right" : "message left";
                    <li class="@messageClass">
                        <strong>@message.Name</strong>
                        <span class="timestamp">(@message.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss"))</span>:
                        <span class="content">@message.Content</span>
                    </li>
                }
            </ul>

            <button id="messageFormDelete">刪除</button>

        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.15/signalr.min.js"></script>
<script>
    // 從 URL 查詢參數中提取 chatroomId
    const urlParams = new URLSearchParams(window.location.search);
    const chatroomId = urlParams.get('chatroomId'); // 讀取 'chatroomId' 的值
    const connection = new signalR.HubConnectionBuilder()
        .withUrl(`/messageHub?chatroomId=${chatroomId}`)
        .build();

    // 處理連線重新連接的事件
    connection.onclose(async () => {
        console.log("Connection lost, attempting to reconnect...");
        await connection.start().catch(err => console.error("Reconnection failed", err));
    });

    // 設定接收訊息的處理ReceiveMessage
    connection.on("RM", (name, content) => {
        const li = document.createElement("li");
        li.innerHTML = `<strong>${name}</strong>: ${content}`;
        document.getElementById("messagesList").appendChild(li);
    });

    // 啟動連線
    connection.start().catch(err => console.error("Connection failed: ", err));

    // 提交留言表單
    document.getElementById("messageForm").addEventListener("submit", async (e) => {
        e.preventDefault();

        const content = document.getElementById("Content").value;

        // 傳送訊息到 Hub，將資料封裝成物件
        const message = {
            content: content,
            createdAt: new Date().toISOString(),
            chatroomId: chatroomId//, // 聊天室ID
        };
        //S=SendMessagePrivate
        await connection.invoke("S", message).catch(err => console.error("SendMessage failed: ", err));

        // 清空輸入框
        document.getElementById("Content").value = "";
    });
    //刪除
    document.getElementById('messageFormDelete').addEventListener('click', function () {
        const button = this;
        // 發送請求並處理結果
        sendRequest(_baseUrlAddAction('DeleteChatRoom'), { chatroomId:chatroomId })
            .then(data => {
                if (data.success) {
                    window.location.href = "../";
                } else {
            
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
    });
</script>